-- MySQL Script generated by MySQL Workbench
-- Sat Oct 21 15:25:11 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema tarea-6
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `tarea-6` ;

-- -----------------------------------------------------
-- Schema tarea-6
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `tarea-6` DEFAULT CHARACTER SET utf8 ;
USE `tarea-6` ;

-- -----------------------------------------------------
-- Table `tarea-6`.`CLIENTES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tarea-6`.`CLIENTES` (
  `ID_Clientes` INT AUTO_INCREMENT NOT NULL,
  `Correo_eletronico` VARCHAR(90) NOT NULL,
  `Nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_Clientes`),
  INDEX idCorreo(Correo_eletronico))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tarea-6`.`PEDIDOS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tarea-6`.`PEDIDOS` (
  `ID_pedidos` INT AUTO_INCREMENT NOT NULL,
  `ID_Cliente` INT NOT NULL,
  `Fecha_pedido` DATE NOT NULL,
  PRIMARY KEY (`ID_pedidos`),
   INDEX id_clientePedido(ID_Cliente),
  CONSTRAINT `ID_Cliente`
    FOREIGN KEY (`ID_Cliente`)
    REFERENCES `tarea-6`.`CLIENTES` (`ID_Clientes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `ID_Cliente_idx` ON `tarea-6`.`PEDIDOS` (`ID_Cliente` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `tarea-6`.`LIBROS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tarea-6`.`LIBROS` (
  `ID_Libro` INT AUTO_INCREMENT NOT NULL,
  `Titulo` VARCHAR(45) NOT NULL,
  `Autor` VARCHAR(45) NOT NULL,
  `Genero` VARCHAR(45) NOT NULL,
  `Precio` INT NOT NULL,
  PRIMARY KEY (`ID_Libro`),
  INDEX id_title(Titulo))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tarea-6`.`STOCK_LIBROS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tarea-6`.`STOCK_LIBROS` (
  `ID_Stock` INT AUTO_INCREMENT NOT NULL,
  `ID_Libro` INT NOT NULL,
  `Cantidad_libros` INT NOT NULL,
  PRIMARY KEY (`ID_Stock`),
  CONSTRAINT `ID_Libro`
    FOREIGN KEY (`ID_Libro`)
    REFERENCES `tarea-6`.`LIBROS` (`ID_Libro`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;
CREATE INDEX `ID_Libro_idx` ON `tarea-6`.`STOCK_LIBROS` (`ID_Libro` ASC) VISIBLE;



DELIMITER //

CREATE PROCEDURE AgregarLibro(
    IN p_Titulo VARCHAR(45),
    IN p_Autor VARCHAR(45),
    IN p_Genero VARCHAR(45),
    IN p_Precio INT,
    IN p_Stock INT
)
BEGIN
    INSERT INTO LIBROS (Titulo, Autor, Genero, Precio)
    VALUES (p_Titulo, p_Autor, p_Genero, p_Precio);
    
    -- Insertar la cantidad de libros en el stock
    SET @last_inserted_libro_id = LAST_INSERT_ID();
    INSERT INTO STOCK_LIBROS (ID_Libro, Cantidad_libros)
    VALUES (@last_inserted_libro_id, p_Stock);
END//
DELIMITER ;

--
-- Realizar pedido
--
DELIMITER $$

CREATE PROCEDURE RealizarPedido(
    IN p_ID_Cliente INT,
    IN p_FechaPedido DATE
)
BEGIN
    INSERT INTO PEDIDOS (ID_Cliente, Fecha_pedido)
    VALUES (p_ID_Cliente, p_FechaPedido);
   
END$$

DELIMITER ;


--
-- CalcularTotalPedido
--
DELIMITER //
CREATE FUNCTION CalcularTotalPedido(ID_pedidos INT)
RETURNS INT
BEGIN
    DECLARE total INT;
	SELECT SUM(Precio) INTO total
    FROM LIBROS L
    JOIN PEDIDOS P ON L.ID_Libro = P.ID_Libro
    WHERE P.ID_pedidos = ID_pedidos;
    
    RETURN total;
END//

DELIMITER ;

--
-- Trigger
--
DELIMITER //
CREATE TRIGGER ProcTrigger
AFTER INSERT ON PEDIDOS
FOR EACH ROW
BEGIN

    DECLARE final INT DEFAULT FALSE;
    DECLARE libro_id INT;
    DECLARE cantidad INT;
    DECLARE lista CURSOR FOR SELECT libro_id, cantidad FROM DETALLES_PEDIDO WHERE ID_pedidos = NEW.ID_pedidos;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN lista;
    read_loop: LOOP
        FETCH lista INTO libro_id, cantidad;
        IF final THEN
            LEAVE read_loop;
        END IF;
        UPDATE STOCK_LIBROS
        SET Cantidad_libros = Cantidad_libros - cantidad
        WHERE ID_Libro = libro_id
        AND Cantidad_libros > 0;
    END LOOP;
    CLOSE lista;
END;
DELIMITER ;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
